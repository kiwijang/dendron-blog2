{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"( Φ w Φ )","n":0.447},"1":{"v":"\n\r\nDendron 官網: https://wiki.dendron.so/\r\n\r\n<!-- ![[首次使用 Dendron 紀錄|drops.2021.1226-first-day#使用-dendron-紀錄:#*]] -->\r\n<div class=\"portal-container\">\r\n<div class=\"portal-head\">\r\n<div class=\"portal-backlink\">\r\n<div class=\"portal-title\">From <span class=\"portal-text-title\">1226 使用 Dendron 紀錄</span></div>\r\n<a href=\"/notes/DTeYpEuPv3KIHugUyqZPu\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\r\n</div>\r\n</div>\r\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\r\n<div class=\"portal-parent-fader-top\"></div>\r\n<div class=\"portal-parent-fader-bottom\"></div><h2 id=\"使用-dendron-紀錄\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#使用-dendron-紀錄\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>使用 Dendron 紀錄</h2>\r\n</div></div>\r\n","n":0.16}}},{"i":2,"$":{"0":{"v":"Tags","n":1}}},{"i":3,"$":{"0":{"v":"PROG","n":1}}},{"i":4,"$":{"0":{"v":"TypeScript","n":1}}},{"i":5,"$":{"0":{"v":"Server","n":1}}},{"i":6,"$":{"0":{"v":"Nx","n":1}}},{"i":7,"$":{"0":{"v":"JavaScript","n":1}}},{"i":8,"$":{"0":{"v":"Dendron","n":1}}},{"i":9,"$":{"0":{"v":"CSS","n":1}}},{"i":10,"$":{"0":{"v":"Angular","n":1}}},{"i":11,"$":{"0":{"v":"Other","n":1}}},{"i":12,"$":{"0":{"v":"About","n":1},"1":{"v":"\n嗨，我是 naomi。\n\n這個部落格是用 Dendron 官方提供的樣板製作而成的。😄\n\n紀錄工作上工作下的程式相關筆記。\n\n關於筆記內容:\n\n如果有時間會盡量翻譯原文，翻譯的地方會附上原文，因為自己不是專業的翻譯員，翻得不妥還有原文在。\n\n基本上會附上參考與引用的出處。\n\n[背景音樂 ✨](https://www.youtube.com/watch?v=azB-_MlmhfI&list=PLgSIM9nRNAK9iVvFTtxdvu_qKk_QnESeE)\n\n> \"I drink 14 pints of mouthwash rations per week. At the rate... I think I'm going to poison myself to death... before I ever get to see the world again, which makes me feel... very sad.\n> I gotta change my program. I gotta go in a new direction. Anything I can do to keep my hands busy, I'm gonna do. Otherwise... I think maybe it's gonna be a suicide. And that's why I signed up for clay pottery and basket weaving. My name is Moses.\" ——《The French Dispatch》\n\n> \"Take a pew.\"\n","n":0.102}}},{"i":13,"$":{"0":{"v":"Drops","n":1}}},{"i":14,"$":{"0":{"v":"2022","n":1}}},{"i":15,"$":{"0":{"v":"0320 JS 小知識(一)","n":0.577},"1":{"v":"\n## 遞增運算子(++)與遞減運算子(--)\n\n```javascript\nx++ <=> x = x + 1\nx-- <=> x = x - 1\n```\n\n## 前置運算(Pre Increment)\n\n```javascript\n+---- x加一後代入y\n|        ↑\nv     +------+\ny  =  | ++x; |----→ x 代入 x+1 的結果\n      +------+\n```\n\n前置運算(Pre Increment): 先計算後再給值，y 和 x 的值一致都是計算後的結果(x+1 的值)。\n\n## 後至運算(Post Increment)\n\n```javascript\n+---- y代入x的值\n|        ↑\n|    +---|------+\nv    | +---+    |\ny  = | | x |++; |\n     | +---+    |------→ x 後代入 x+1 的結果\n     +----------+\n```\n\n後至運算(Post Increment): 先給值後再計算，y 可以保留 x+1 之前的值，x 保留 x+1 的值。\n\n## 差別\n\n```javascript\n// Post Increment\nvar x = 3;\nvar y = x++;\nconsole.log(x); // 4\nconsole.log(y); // 3\nconsole.log(`上一號: ${y}，目前號碼: ${x}`); // 上一號: 3，目前號碼: 4\n\n// Pre Increment\nvar x = 3;\nvar y = ++x;\nconsole.log(x); // 4\nconsole.log(y); // 4\nconsole.log(`目前人數共 ${x}/${y}`); // 目前人數共 4/4\n```\n\n總之，\n\n++x 運算符號在前(Pre)，就先進行運算!\n\nx++ 運算符號在後(Post)，先附值到使用運算子的對象上(x)，再運算。\n","n":0.1}}},{"i":16,"$":{"0":{"v":"0208 Live Server 開啟 build 檔案","n":0.408},"1":{"v":"\n## 1. 直接資料夾開啟 index.html，會遇到一些問題:\n\n在 angular 的 index.html 預設是 `<base href=\"/\">`\n\n所以會以檔案資料夾目錄的位置打開(網址列會長這樣: `file:///C:/Users/xxx.../dist/apps/client/index.html`)\n\n如果想用 `<base href=\"./\">` 解決問題，若有設定路由會發現網址除了 server 根網址以外還多了路由，然後發生 404 錯誤...\n\n![](/assets/images/2022-02-08-17-00-24.png)\n\n另外，在瀏覽器上 es6 module 一定會遵循 CORS (參考文章:[ES6 模組匯入-林信良](https://www.ithome.com.tw/voice/132470))，所以如果直接用 `file:///C:/Users/xxx.../dist/apps/client/index.html` 開啟會出現這樣的錯誤:\n\n![](/assets/images/2022-02-08-17-18-04.png)\n\n![](/assets/images/2022-02-08-17-55-33.png)\n\n> Origin: null 是 null 的。😭\n\n## 2. 下載 Live Server\n\n![](/assets/images/2022-02-08-13-49-40.png)\n\n所以這時就可以用 vscode 的 [Live Server 擴充套件](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer) 來解決 Origin 的問題。\n\n接著發現可以成功載入首頁，但是其他路由會 404...\n\n## 3. 使用 Live Server 但路由出問題:\n\n原因是瀏覽器把路由當成 http request 了。😭\n\n![](/assets/images/2022-02-08-18-04-09.png)\n\n於是為了解決這個問題，可以設定 HashLocationStrategy。\n\n```typescript\nproviders: [{provide: LocationStrategy, useClass: HashLocationStrategy},\n```\n\n## 4. 關於 Angular HashLocationStrategy\n\n- Angular 官網\n  [HashLocationStrategy](https://angular.tw/api/common/HashLocationStrategy)\n\n> A LocationStrategy used to configure the Location service to represent its state in the [hash fragment](https://en.wikipedia.org/wiki/URL#Syntax) of the browser's URL.\n> 此 LocationStrategy 用來配置 Location 服務，以便在瀏覽器 URL 的 [hash 片段](https://en.wikipedia.org/wiki/URL#Syntax)中表示其狀態。\n\n- URI fragment wiki 說明\n  [URI fragment](https://en.wikipedia.org/wiki/URI_fragment)\n\n> Fragments depend on the document MIME type and are evaluated by the client (web browser). Clients are not supposed to send URI fragments to servers when they retrieve a document, and without help from a local application (see below) fragments do not participate in HTTP redirections.\n\n所以看起來 fragments 可以解決網址被送到 server 的問題！🎉\n\n感覺設定成 HashLocationStrategy 只有好處沒有壞處的感覺(除了不常看到有網址會長這樣以外)。\n\n## 5. 小結:設定 HashLocationStrategy + live server\n\n以後要開啟 build 後的檔案，可以設定 HashLocationStrategy 然後再用 live server 開啟就 Ok 了。🎉\n","n":0.078}}},{"i":17,"$":{"0":{"v":"0107 PostCSS 和 Sass","n":0.5},"1":{"v":"\n## 1. 前言\n\n到底為什麼要用 PostCSS 和 Sass?\n\n本篇筆記目的在搞清楚 CSS 的定義，然後說明 PostCSS 和 Sass 的用途。\n\n## 2. 關於 CSS\n\n不免俗先來權威機構 [W3C](https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91%E8%81%94%E7%9B%9F) 的定義。\n\nhttps://www.w3.org/standards/webdesign/htmlcss\n\n> What is CSS?\n> CSS is the language for describing the presentation of Web pages, including colors, layout, and fonts. It allows one to adapt the presentation to different types of devices, such as large screens, small screens, or printers. CSS is independent of HTML and can be used with any XML-based markup language. The separation of HTML from CSS makes it easier to maintain sites, share style sheets across pages, and tailor pages to different environments. This is referred to as the separation of structure (or: content) from presentation.\n\n> CSS 是啥?\n> CSS 是一種描述網頁呈現外觀的語言，包括顏色、排版、字體。它能根據載體來調整不同的呈現類型，譬如大螢幕、小螢幕或印表機。\n> CSS 獨立於 HTML 而且可以搭配任何以 XML 為基礎(XML-based) 的標記語言。在 HTML 中將 CSS 區分出來可以更容易地維護一個網站、跨頁分享樣式表和將頁面適應(tailor)於不同環境。這個涉及呈現外觀(presentation)的分離結構(或: 內容)。\n\n感覺起來 CSS 就是拿來定義頁面的樣式的。那命名是還蠻貼切的: CSS (Cascading Style Sheets)，如瀑布般下落的樣式表單。\n\n### 2.1. CSS 版本\n\nhttps://zh.wikipedia.org/wiki/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8\n\n- CSS Level 1\n- CSS Level 2\n- CSS Level 3\n- CSS Level 4\n\n我就是從 CSS3 入門的! 動畫超有趣!🥰\n\n> CSS3 亦支援動畫（animation）及立體（preserved-3d）。 —— Wikipedia\n\n### 2.2. CSS Syntax (句法)\n\nhttps://www.w3schools.com/css/css_syntax.asp\n\n![](/assets/images/2022-01-07-22-52-32.png)\n\n> HTML 和 CSS 是建置網頁的核心技術。透過瀏覽器我們可以看到網頁，所以可以透過 [Can I use](https://caniuse.com/) 來確定某個 CSS 的屬性(property)能不能使用。\n\n### 2.3. CSS Specificity (權重)\n\n再次不免俗，MDN 權威定義: https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\n\n> Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied. Specificity is based on the matching rules which are composed of different sorts of CSS selectors.\n\n> 權重讓瀏覽器決定哪個元素跟屬性最有相關，而最相關的會被賦予樣式。權重依照 CSS 選擇器的排序有一套專屬的比對規則。\n\n```markdown\n!important > inline style > ID > Class/psuedo-class/attribute > Element\n0, 0, 0, 0, 0\n```\n\n有些例外: :is() 和 :not() 不納入權重計算。\n\n跟 js 一樣，css 從前往後讀，相同權重越後面的會覆蓋前面的。\n\n以 HTML 巢狀結構來看，內層會繼承上層樣式，但是如果該元素有被指定樣式，則以自己層的樣式為優先。\n\n所以計算權重指的是 HTML 結構中同一層元素，以該元素的 CSS 選擇器(Selector) 來計算權重。\n\n![](/assets/images/2022-01-07-23-16-39.png)\n\n> 位數概念: 如圖，最上層位數最大。\n\nSelector 計算方式舉例:\n\n```markdown\nbody h3 a → 0,0,0,0,3\nbody>h3>a → 0,0,0,0,3\nbody h3.myClass a → 0,0,0,1,3\nbody h3.myClass::before → 0,0,0,2,2\nbody h3 a:hover→ 0,0,0,1,3\nbody h3 a[href^=\"https\"]→ 0,0,0,1,3\n```\n\n這樣看起來我已經好久沒有用過 ID 了，Class/psuedo-class/attribute、 Element 最常用。😳\n\n### 2.4. CSS 效能\n\n[writing-efficient-css-selectors by Harry](https://csswizardry.com/2011/09/writing-efficient-css-selectors/)\n\n使用哪種選擇器效能比較好?(由上而下月上面的 selector 方式越好):\n\n1. ID, e.g. `#header`\n2. Class, e.g. `.promo`\n3. Type, e.g. `div`\n4. Adjacent sibling, e.g. `h2 + p`\n5. Child, e.g. `li > ul`\n6. Descendant, e.g. `ul a`\n7. Universal, i.e. `*`\n8. Attribute, e.g. `[type=\"text\"]`\n9. Pseudo-classes/-elements, e.g. `a:hover`\n\n看起來就是選得越準確越好。\n\n[css-selector-performance by Steven Bradley](https://vanseodesign.com/css/css-selector-performance/)\n\n- Avoid Universal Rules:\n\n  避免用 `*` (全選很耗效能)。\n\n- Don't qualify ID Rules with tag names or classes:\n\n  不要把 ID 名命名為 tag 名或 class 名。\n\n- Don't qualify Class Rules with tag names\n\n  不要把 class 名命名為 tag 名。\n\n- Use the most specific category possible\n\n  用最明確的類別(指定的越準確效能越好)。\n\n- Avoid the descendant selector\n\n  避免 `ul li` 選，跟全選同概念，很耗效能。\n\n- Tag Category rules should never contain a child selector\n\n  tag 應該永不包含 child selector。\n\n  也就是說不建議這樣 `ul > li`。\n\n  有點難懂...應該跟 `*` 同概念，選越少越好?🙄\n\n- Question all usages of the child selector\n\n  所有的 `ul > li` 都要抱持懷疑，真的有必要這麼多層嗎?\n\n  感覺是可讀性和效能的取捨耶。\n\n- Rely on inheritance\n\n  請倚賴繼承。\n\n- Use scoped stylesheets\n\n  使用區域樣式表單。\n\n  寫 angular 就是都有使用 scoped stylesheets，每一個 conponent 都幫你切好好的一個 scope。\n\n## 3. Sass 和 PostCSS 跟 CSS 的關係\n\n根據上面的介紹，感覺 CSS 那麼多功能又深奧，到底為什麼還需要 Sass 和 PostCSS?\n\n來看一下各自的官網簡介:\n\n### 3.1. Sass\n\nhttps://sass-lang.com/\n\n> Sass is the most mature, stable, and powerful professional grade CSS extension language in the world.\n\n> Sass 是世上最成熟、穩定、強大的專家級 CSS 擴充語言。\n\n### 3.2. PostCSS\n\nhttps://postcss.org/\n\n> A tool for transforming CSS with JavaScript\n\n> 一個用 JavaScript 轉換 CSS 的工具。\n\n從字面上看起來它們都是幫助人們撰寫 CSS 的工具。\n\n接下來要來看它們如何幫助開發與其運作原理。\n\n## 4. Sass\n\n### 4.1. Sass 特點\n\n- CSS 兼容性 CSS Compatible\n\n  Sass 可以完全兼容 CSS 的所有版本。Sass 十分看重兼容性，所以可以無縫接軌到任何可用的 CSS library 上。\n  Sass is completely compatible with all versions of CSS. We take this compatibility seriously, so that you can seamlessly use any available CSS libraries.\n\n- 功能豐富 Feature Rich\n\n  Sass 自豪擁有比其他 CSS 擴充語言更多的功能和能力。Sass 核心團隊無止境的工作不只是為了維持還包含持續領先。\n  Sass boasts more features and abilities than any other CSS extension language out there. The Sass Core Team has worked endlessly to not only keep up, but stay ahead.\n\n- 成熟的 Mature\n\n  Sass 已經被支援 15 年了。\n  Sass has been actively supported for about 15 years by its loving Core Team.\n\n- 業界認可 Industry Approved\n  業界總是首選 Sass 作為 CSS 擴充語言。\n  Over and over again, the industry is choosing Sass as the premier CSS extension language.\n\n- 龐大社群 Large Community\n\n  Sass 被聯營企業、科技公司和上百位開發者共同支持與開發著。\n  Sass is actively supported and developed by a consortium of several tech companies and hundreds of developers.\n\n- 框架 Frameworks\n  有無數框架使用 Sass 建置而成。如 Compass、Bourbon、Susy...等。\n  There are an endless number of frameworks built with Sass. Compass, Bourbon, and Susy just to name a few.\n\n### 4.2. Sass 運作原理(如何變成 CSS)\n\nhttps://www.w3schools.com/sass/sass_intro.php\n\n瀏覽器看不懂 Sass 程式碼。因此，你會需要 Sass 預處理器將 Sass 程式碼轉換成標準的 CSS。\n\n這個過程稱為轉譯。所以你需要給轉譯器(一種程式) Sass 程式碼然後會得到 CSS 程式碼。\n\n小秘訣: 轉譯是一個取得一個語言的源碼然後將它轉變/轉譯成另一種語言。\n\n> A browser does not understand Sass code. Therefore, you will need a Sass pre-processor to convert Sass code into standard CSS.\n>\n> This process is called transpiling. So, you need to give a transpiler (some kind of program) some Sass code and then get some CSS code back.\n>\n> Tip: Transpiling is a term for taking a source code written in one language and transform/translate it into another language.\n\n## 5. PostCSS\n\n### 5.1. PostCSS 特點\n\n- Autoprefixer\n\n  ![](/assets/images/2022-01-17-15-15-09.png)\n\n  增加可讀性\n  從 Can I Use 的資料加入廠商前綴詞，[Autoprefixer](https://github.com/postcss/autoprefixer) 會使用目前人氣瀏覽器和屬性支持度來幫你加上前綴。\n  Increase code readability\n  Add vendor prefixes to CSS rules using values from Can I Use. Autoprefixer will use the data based on current browser popularity and property support to apply prefixes for you.\n\n  ```CSS\n  /* CSS input */\n  :fullscreen {\n  }\n\n  /* CSS output */\n  :-webkit-full-screen {\n  }\n  :-ms-fullscreen {\n  }\n  :fullscreen {\n  }\n  ```\n\n- 使用最新的 CSS 語法! Use tomorrow's CSS today!\n\n  [postcss-preset-env](https://github.com/csstools/postcss-preset-env) 讓你可以將現代 CSS 用 [cssdb](https://github.com/csstools/cssdb/blob/main/README.md) 根據你的目標瀏覽器或 runtime 環境來轉換成大多數瀏覽器可以懂、決定用哪種 polyfills 的 CSS。\n  PostCSS Preset Env, lets you convert modern CSS into something most browsers can understand, determining the polyfills you need based on your targeted browsers or runtime environments, using [cssdb](https://github.com/csstools/cssdb/blob/main/README.md).\n\n  ```CSS\n  /* CSS input */\n  body {\n      color: lch(53 105 40);\n  }\n\n  /* CSS output */\n  body {\n      color: rgb(250, 0, 4);\n  }\n\n  ```\n\n- CSS 模組 CSS Modules\n\n  全域 CSS 的盡頭\n  CSS 模組代表你不需要擔心命名太過通用，可以直接使用最具意義的命名。\n  The end of global CSS\n  CSS Modules means you never need to worry about your names being too generic, just use whatever makes the most sense.\n\n  ```CSS\n  /* CSS input */\n  .name {\n       color: gray;\n  }\n\n  /* CSS output */\n  .Logo__name__SVK0g {\n      color: gray;\n  }\n  ```\n\n- 避免錯誤 Avoid errors in your CSS\n\n  使用 [stylelint](https://github.com/stylelint/stylelint) 執行一致的常規並避免樣式表的錯誤。[stylelint](https://github.com/stylelint/stylelint) 是一個現代 CSS linter，支援最新的 CSS 語法，也支援如 SCSS 的 CSS-like 語法。\n  Enforce consistent conventions and avoid errors in your stylesheets with [stylelint](https://github.com/stylelint/stylelint), a modern CSS linter. It supports the latest CSS syntax, as well as CSS-like syntaxes, such as SCSS.\n\n### 5.2. PostCSS 運作原理(如何變成 CSS)\n\nhttps://www.youtube.com/watch?v=WhCXiEwdU1A\n\n> ![](/assets/images/2022-01-17-16-12-49.png)\n> 可以和 Sass、less 合用，或是如圖用 postCSS 的 plugin 功能取代 Sass 和 less。\n\nhttps://www.toptal.com/front-end/postcss-sass-new-play-date\n\n> PostCSS is all about plugins. PostCSS 就是 plugins。\n\nhttps://cythilya.github.io/2018/08/10/postcss/\n\n> Summer 大大的文章。\n\n## 小結\n\n我還是搞不懂 postCSS 和 Sass 的差別xD\n但是知道 postCSS 是需要什麼功能時才透過加入 plugin 來使用功能，\n而 Sass 是一開始整包就幫你準備好了，照用就好了。\n\n## 6. tailwindcss\n\nhttps://tailwindcss.com/\n\n> Rapidly build modern websites without ever leaving your HTML.\n> 不用離開 HTML 就可以建置現代網頁。\n\n---\n\n## 7. Angular 相關\n\n以下是 Angular 應用 css 套件的相關文章。\n\nhttps://angular.tw/guide/component-styles\n\n## 8. Angular 已經有 Autoprefixer 了\n\n[Autoprefixer](https://angular.tw/guide/build#configuring-browser-compatibility)\n\n## 9. PurgeCSS with Angular\n\nhttps://dev.to/dylanvdmerwe/reduce-angular-style-size-using-purgecss-to-remove-unused-styles-3b2k\n\n## 10. webpack Loaders\n\n> sass-loader、postcss-loader\n\nhttps://stackoverflow.com/questions/59715916/how-to-use-sass-loader-in-angular\n\n## 11. tailwindcss with Angular\n\nhttps://hsuchihting.github.io/TailwindCSS/20210702/3640682418/\n\nhttps://medium.com/@JedChou/%E5%A6%82%E4%BD%95%E5%9C%A8-angular-%E5%B0%88%E6%A1%88%E4%B8%AD%E4%BD%BF%E7%94%A8-tailwind-css-e119b6390803\n\n## 12. Nx for Angular and tailwind\n\nhttps://nx.dev/angular/setup-tailwind\n\n先下載 tailwind\n\n```bash\nnpm install tailwindcss@latest postcss@latest autoprefixer@latest\n```\n\n選擇 .scss\n\n```javascript\n@import \"tailwindcss/base\";\n@import \"tailwindcss/components\";\n@import \"tailwindcss/utilities\";\n```\n\nhttps://nx.dev/guides/using-tailwind-css-in-react#step-1-install-tailwind-dependencies\n\nnpm install stylelint-config-recommended --save-dev\n\n13 版後 tailwind.config.js 會放置在 app 裡，預設只會\n\n```javascript\nmodule.exports = {\n  content: [\n    join(__dirname, 'src/**/*.{html,ts}'),\n    ...createGlobPatternsForDependencies(__dirname),\n  ],\n  //...\n};\n```\n","n":0.031}}},{"i":18,"$":{"0":{"v":"2021","n":1}}},{"i":19,"$":{"0":{"v":"1227 從 Nx 入門 monorepo","n":0.447},"1":{"v":"\n\r\n## 前言\r\n\r\n> 深入淺出 Monorepo 架構 — 使用 Nx Console 實現一個 Monorepo 架構的專案\r\n\r\n導讀影片: [Monorepos - How the Pros Scale Huge Software Projects // Turborepo vs Nx](https://www.youtube.com/watch?v=9iU_IE6vnJ8)\r\n\r\n## 1. 簡介 Monorepo 架構\r\n\r\nMonorepo (全名 Monolithic Repository)，符合以下三個條件:\r\n\r\n1. One Repository\r\n2. Multiple projects\r\n3. Shared Libraries\r\n\r\n如下圖，可以看到:\r\n\r\n1. **一個 repo**\r\n2. **多個 projects** (三個 app 加上兩個 libs)\r\n3. **共用 libs**\r\n\r\n![MonoRepo](/assets/images/2021-12-27-22-50-05.png)\r\n\r\nMonorepo 架構的主要目的是希望集中管理套件版本。\r\n\r\n透過只管理一個 `package.json`，可以發現好處是套件版本管理方便、而壞處是一個 repo 有多個 projects，檔案容易變非常大，讓 git 版控軟體跑起來較吃力。\r\n\r\n另外 Monorepo 讓 apps 之間共用 libs 變得方便簡單，所以可以降低重複程式碼的機率。\r\n也可以讓 Lerna、yarn 等套件管理工具更方便的減少重複的套件安裝。\r\n\r\n而以 Nx 來說，更酷的特色是可以在同一個 repo 裡同時使用 react 和 angular 共同開發一個 app。\r\n\r\n雖然也可以使用 rollupjs 來達到不同前端框架共同開發一個 app 的效果。\r\n\r\n但 Nx 就像 monorepo 全家桶: 提供一個 Nx workspace 讓你的 monorepo 開發更容易。\r\n\r\n接下來，在看看 Nx 之前，先來一些先備知識。\r\n\r\n## 2. 簡介 Nx 工具與專有名詞解釋\r\n\r\n### 2-1. 什麼是 Nx ?\r\n\r\n官網: https://nx.dev/\r\n\r\n![](/assets/images/2021-12-27-23-55-50.png)\r\n\r\n> 聰明、可擴充的建置框架，Nx 幫助任何規模的架構、測試、建置。\r\n> (Smart, Extensible Build Framework Nx helps architect, test, build at any scale:)\r\n\r\n- 以現代框架進行整合。(integrations with modern frameworks)\r\n- 計算快取。(computation caching)\r\n- 聰明的重新建置被修改過的專案。(smart rebuilds of affected projects)\r\n- 分散式任務執行。(distributed task execution)\r\n- 強大的程式碼產生器。(powerful code generators)\r\n- 支援 VSCode 和 WebStorm 編輯器。(editor support (VSCode, WebStorm))\r\n- (GitHub apps)\r\n- 還有更多。(and more.)\r\n\r\n### 2-2. Nx 的製作團隊\r\n\r\nnarwhal 簡寫 Nrwl，是獨角鯨的英文。\r\n\r\n![](/assets/images/2021-12-27-23-57-12.png)\r\n\r\n顧問、工程、訓練。\r\nConsulting. Engineering. Training.\r\n\r\nNrwl 創立於 2016 12 月，以 Angular 團隊成員、多位前 Google 員工、Jeff Cross、Victor Savkin 所組成。\r\n\r\n如今已有 18 位左右成員 (在美國、加拿大和英國)。\r\n\r\nNrwl 也是開源開發工具們的製作者: 給 monorepo 開發用的 Nx、和 Angular Console。\r\n\r\nNrwl was founded in December 2016 by Angular team members and former Googlers, Jeff Cross and Victor Savkin, and today has around 18 team members in the US, Canada and UK.\r\nNrwl is also the creator of open-source dev tools: Nx for monorepo development, and Angular Console.\r\n\r\n### 2-3. Angular monorepo patterns\r\n\r\n這本書說明了 nx 是如何實踐 monerepo 概念。\r\n\r\n![](/assets/images/2021-12-27-23-59-52.png)\r\n\r\n- https://connect.nrwl.io/app/books\r\n- https://nrwl.io/products\r\n\r\n### 2-4. Nx 與 Angular 淵源不淺\r\n\r\n![](/assets/images/2021-12-28-00-06-48.png)\r\n\r\n上面這兩位 Nx 開發的主導者是 Google 的前員工，且對 Angular 都有相當深入的理解。\r\n但 Nx 官網上有不少 react 的開發教學，如果有公司想要從 react 轉到 angular(或是 angular 轉 react 為主)，\r\n感覺透過 Nx 的幫助可以慢慢地移花接木(不然 Nx 也至少可以讓這兩框架和平共處)。😆\r\n\r\n### 2-5. Angular 詞彙表\r\n\r\n- [Workspace](https://angular.tw/guide/glossary#workspace) (工作區)\r\n\r\n  一個 Angular 所有專案的集合(可以用 Angular CLI 操作這個集合)，通常會在 git 版本控制的 repository 中。\r\n\r\n- [Project](https://angular.tw/guide/glossary#project) (專案)\r\n\r\n  可以通過 Angular CLI 命令創建或修改的獨立應用程式或函式庫。可在 angular.json 中配置 workspace 中的所有 projects。\r\n\r\n- [Library](https://angular.tw/guide/glossary#library) (函式庫)\r\n\r\n  一種 Angular 專案。用來讓其它 Angular 應用包含它，以提供各種功能。函式庫不是一個完整的 Angular 應用，不能獨立執行。\r\n\r\n- [TypeScript 配置](https://angular.tw/guide/typescript-configuration#configuration-files)\r\n\r\n  一個 Angular 工作區中包含多個 TypeScript 配置檔案。在 root，有兩個主要的 TypeScript 配置檔案：tsconfig.json 檔案和 tsconfig.app.json 檔案。[使用 extends 進行配置繼承](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#tsconfig-bases)。\r\n\r\n- [Schematic](https://angular.tw/guide/glossary#schematic) (原理圖)\r\n\r\n  Angular CLI 使用原理圖來產生和修改 Angular 專案及其部件。\r\n\r\n- Collection (集合)\r\n\r\n  在 Angular 中，是指收錄在同一個 [npm 套件](https://angular.tw/guide/glossary#npm-package) 中的一組原理圖（schematics）。\r\n\r\n  ![](/assets/images/2021-12-28-00-23-52.png)\r\n\r\n### 2-6. Nx 名詞解釋\r\n\r\n- Generators (產生器)\r\n  產生器提供了一種方法，來自動執行您在開發工作流程中，經常執行的許多任務。\r\n  在 Nx 中，可以使用 `@nrwl/devkit` 或 `@angular-devkit` ，來製作產生器。\r\n  使用 `@angular-devkit` 製作的稱為 schematics (原理圖)。\r\n\r\n  下圖為 Nx 官網的 sidebar 的一小部分截圖，可以看見 Generator 有不少篇幅介紹。\r\n\r\n  ![](/assets/images/2021-12-28-21-51-09.png)\r\n\r\n### 2-7. Nx 的 Generators 的使用方式\r\n\r\n可以發現 Nx 的 `[plugin]:[generator-name]` 就是 Angular 的 `[collections]:[schematic]`。\r\n\r\n有用 angular 寫過 schematic 的人有福了，可以更快上手 Nx 的 generator。🎉\r\n\r\n以下是關於如何調用 gnerator 的內容(截自官網):\r\n\r\n- 調用插件產生器 [Invoking Plugin Generators](https://nx.dev/l/a/generators/using-schematics#invoking-plugin-generators)\r\n\r\n  產生器可以讓你以簡單和可重複的方式新增修改程式碼。可以使用 `nx generate` 指令來調用 (invoked) 產生器。\r\n  Generators allow you to create or modify your codebase in a simple and repeatable way. Generators are invoked using the nx generate command.\r\n\r\n  ```cmd\r\n  nx generate [plugin]:[generator-name] [options]\r\n  nx generate @nrwl/angular:component mycmp --project=myapp\r\n  ```\r\n\r\n  在使用產生器前有一個乾淨的 git 工作路徑很重要，因為這樣你能輕易的還原變動 (revert changes)、並使用不一樣的設定來重新調用產生器。\r\n  It is important to have a clean git working directory before invoking a generator so that you can easily revert changes and re-invoke the generator with different inputs.\r\n\r\n### 2-8. 小補充: 關於 collection 為何都是「＠xxx/ooo」這樣命名?\r\n\r\n這是 npm 的命名規則，詳情可以參考 npm 官網影片: [Working with npm private modules\r\n](https://www.youtube.com/watch?v=O6JoXGnHK_Y)\r\n\r\n> ＠後的字稱為 `@scope`，通常是 npm 的帳號名字(尤其要 publish 到 npm 上的話，就是 `@username` 的意思。)\r\n\r\n![](/assets/images/2021-12-28-21-53-15.png)\r\n\r\n## 3. 感受一下 Nx 的 monorepo 專案\r\n\r\n- Angular workspace 的 libs 通常都會有一個自己的 `package.json`\r\n\r\n  ![](/assets/images/2021-12-28-00-24-21.png)\r\n\r\n- Nx workspace 預設共用一個 `package.json`\r\n\r\n  ![](/assets/images/2021-12-28-00-28-00.png)\r\n\r\n### 3-1. 產生一個 Nx 的 workspace\r\n\r\nhttps://www.npmjs.com/package/create-nx-workspace\r\n\r\n![](/assets/images/2021-12-28-21-48-43.png)\r\n\r\n### 3-2. Nx 的 workspace 圖示\r\n\r\n除了圖示裡的這些，Nx workspace 也可以用來整合開發其他框架(最後面會補充)。\r\n\r\n![](/assets/images/2021-12-28-22-18-03.png)\r\n\r\n## 4. 快速上手 Nx Console 操作 (Generate、Run)\r\n\r\n### 4-1. Nx Console 簡介\r\n\r\n- Nx Console 套件安裝\r\n\r\n  - [Install from the VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console)\r\n  - [Contribute on GitHub](https://github.com/nrwl/nx-console)\r\n\r\n- Nx Console 前生今世\r\n\r\n  `Nx Console` 前生為 `Angular Console`，詳情可以看這篇文章:\r\n  https://blog.nrwl.io/re-introducing-nx-console-a21fa9f4f668\r\n\r\n  `Angular Console` 是一個桌面應用程式 (Desktop App)。\r\n\r\n  最一開始是以 `Electron` 在開發，後來 `Angular Console` 團隊將桌面應用程式移植到 VS Code 的擴充套件上。結果發現效能很糟...\r\n\r\n  所以他們就決定打掉重練： 以 VS Code 套件提供的基底重新開發一個擴充套件，\r\n\r\n  並且順帶將套件重新命名為 `Nx Console`。\r\n\r\n  `Nx Console` 包括 `Angular Console` 和 `Nx` 的功能，最後連 `Nx` 和 `Angular Console` 的製作團隊也整併再一起了。\r\n\r\n  ![](/assets/images/2021-12-28-22-21-50.png)\r\n\r\n- Nx 套件教學\r\n\r\n  如果不小心跳過一開始的新手教學，可以到 github 看，`Nx Console` 套件的也是以 `Nx 架構` 寫成的。😎\r\n\r\n  https://github.com/nrwl/nx-console/tree/master/apps/vscode/src/getting-started\r\n\r\n- Nx Console 官網主打口號\r\n\r\n  - Nx 專用的純 UI 介面。(True UI for Nx)\r\n  - 專家和初學皆適用。(Useful for both experts and beginners)\r\n  - 豐富的文件說明。(Documentation)\r\n\r\n- 介面分三個區塊\r\n\r\n  - Generate & Run Target\r\n    開發專案時常用到的指令。等等下面會講一下 `Generate` 和 `Run`。\r\n  - Common Nx Commands\r\n    關於被修改過的檔案會有一些功能可以用，另外還有產生專案相依狀態的圖表、依次執行多個指令的指令可以用。\r\n  - Projects\r\n    這裡就是圖示化 `angular.json` 的 `projects` 區塊，可以直接按按鈕執行 script。\r\n\r\n    ![](/assets/images/2021-12-28-22-35-51.png)\r\n\r\n### 4-2. nx generate (常見的 collection)\r\n\r\n當你按下 `Generate` 的按鈕時，就會幫你執行 `nx generate`，並根據 `generator` (`schematic`) 產生預期的結果。\r\n以下列出常見的 collection:\r\n\r\n1. `@angular/cdk`\r\n2. `@angular/material`\r\n\r\n   以上兩個都是 Angular Material 相關 collection。\r\n\r\n   ![](/assets/images/2021-12-28-22-53-23.png)\r\n\r\n3. `@nrwl/storybook`\r\n\r\n   Storybook 相關 collection。\r\n\r\n4. `@nrwl/angular`\r\n\r\n   Nx cli 預設的 collection (1)。\r\n\r\n5. `@nrwl/workspace`\r\n\r\n   Nx cli 預設的 collection (2)。\r\n\r\n6. `@schematics/angular`\r\n\r\n   Angular cli 預設的 collection。\r\n\r\n### 4-3. 產生 Library 有三個 schematic 可以用\r\n\r\n- `@schematics/angular`\r\n\r\n  ![](/assets/images/2021-12-28-22-58-21.png)\r\n\r\n- `@nrwl/angular`\r\n\r\n  ![](/assets/images/2021-12-28-22-59-05.png)\r\n\r\n  ![](/assets/images/2021-12-28-23-00-04.png)\r\n\r\n  ![](/assets/images/2021-12-28-23-00-23.png)\r\n\r\n- `@nrwl/workspace`\r\n\r\n  ![](/assets/images/2021-12-28-22-59-20.png)\r\n\r\n* collection 偵測方式 (node_module/ 全部偵測):\r\n\r\n  https://github.com/nrwl/nx-console/blob/ad3578a1a2/libs/server/src/lib/utils/read-collections.ts\r\n\r\n* vscode-angular-schematics collection 偵測方式:\r\n\r\n  https://github.com/cyrilletuzi/vscode-angular-schematics/blob/main/src/defaults.ts\r\n\r\n### 4-4. nx run\r\n\r\n同時 build 所有 projects 內有 build script 的專案。\r\n\r\n`nx run-many --target=build --all --parallel`\r\n\r\n![](/assets/images/2021-12-28-23-01-03.png)\r\n\r\n- https://angular.tw/cli/run\r\n- https://nx.dev/l/a/cli/run-many\r\n\r\n## 5. 其他補充\r\n\r\n### 5-1. 常見的 Monorepo 架構開發工具\r\n\r\n![](/assets/images/2021-12-28-23-03-34.png)\r\n\r\n還有更多工具: https://github.com/korfuri/awesome-monorepo\r\n\r\n### 5-2. 誤解: Nx 和 Yarn Workspace/Lerna 只能擇一使用?\r\n\r\nhttps://nx.dev/l/n/guides/lerna-and-nx#clarifying-misconceptions\r\n\r\n![](/assets/images/2021-12-28-23-05-05.png)\r\n\r\n功能沒有重疊，Nx 不是 package manager 也不是 JS-only 的工具。可一起用。\r\n\r\n![](/assets/images/2021-12-28-23-05-31.png)\r\n\r\nNx 官方 youtube 頻道相關影片\r\n\r\n- [How to Migrate From Lerna to Nx](https://www.youtube.com/watch?v=Edv7ZeI8Bwc)\r\n- [Lerna/Yarn to Nx: Faster Build Times + Better Dev Ergonomics](https://www.youtube.com/watch?v=BO1rwynFBLM)\r\n\r\n### 5-3. 查看有哪些 Nx plugin 可以使用\r\n\r\n`nx list`\r\n\r\n或到官網查看列表:\r\nhttps://nx.dev/community#community-plugin-list\r\n\r\n### 5-4. Nx 13\r\n\r\n![](/assets/images/2021-12-28-23-07-16.png)\r\n\r\nWebpack 5 Module Federation Plugin\r\n\r\n- https://nx.dev/l/a/guides/setup-mfe-with-angular\r\n- Micro Frontends with Angular using Module Federation - Manfred Steyer\r\n\r\n### 5-5. Nx 學習資源\r\n\r\n- Nx 官網\r\n\r\n  https://nx.dev/\r\n\r\n- Nx Console for VSCode 介紹\r\n\r\n  https://nx.dev/latest/angular/getting-started/console#nx-console-for-vscode\r\n\r\n- Github 上用 Nx + Angular 星星數最多的專案 Angular Spotify by Trung Vo\r\n\r\n  https://github.com/trungk18/angular-spotify\r\n\r\n- Angular Spotify 作者專訪 youtube\r\n\r\n  https://youtu.be/w04CfqZI8Xo\r\n\r\n- Nx Conf 連結 (2021/9/16-2021/9/17)\r\n\r\n  https://youtu.be/oG2QbFquraA\r\n\r\n  https://www.youtube.com/watch?v=hlGOaGDsWKg\r\n\r\n- 書\r\n\r\n  https://connect.nrwl.io/app/books\r\n\r\n  https://nrwl.io/products\r\n","n":0.035}}},{"i":20,"$":{"0":{"v":"1226 使用 Dendron 紀錄","n":0.5},"1":{"v":"\n\r\n## 使用 Dendron 紀錄\r\n\r\n### Dendron 簡介\r\n\r\n筆記都可以方便被記錄，但取出筆記又是一大學問。\r\n\r\nDendron 主打方便取出筆記 (get notes back out)。\r\n作者 [Kevin](https://www.dendron.so/about) 說道 Dendron 有以下三特點:\r\n\r\n- [Note Reference](https://wiki.dendron.so/notes/f1af56bb-db27-47ae-8406-61a98de6c78c/)\r\n- [Commands](https://wiki.dendron.so/notes/eea2b078-1acc-4071-a14e-18299fc28f47/#refactor-hierarchy)\r\n- [Lookup](https://wiki.dendron.so/notes/a7c3a810-28c8-4b47-96a6-8156b1524af3/)\r\n\r\n總之，寫筆記可以變得像在寫程式，可以加入「參考」，如果「參考」不存在，還可以幫你新增一個對應的空白參考。\r\n\r\n檔案分類以資料夾檔名分類，每篇筆記會有一個獨一無二的 id，同時一個 id 會有一個 title (文章標題)。\r\n\r\n當使用者想將文章移去其他分類時只要改檔名就好，檔名命名邏輯以「.」分層，第一層.第二層.第三層... 以此類推。\r\n\r\n另外還有 Note Graph 的功能 `ctrl+shift+P`、`Dendron: Show Note Graph` 就可以看到整個 vault 的結構 (下圖為我目前的 Note Graph)。\r\n\r\n![](/assets/images/2022-01-01-13-19-20.png)\r\n\r\n[綱要(Schemas)](https://wiki.dendron.so/notes/c5e5adde-5459-409b-b34d-a0d75cbb1052/) 是用 YAML 來為筆記設定基礎樣板。\r\n\r\n支援 [mermaid-js](https://mermaid-js.github.io/mermaid/#/)。\r\n\r\n另外 Dendron 提供了不少 [組織(Organizing)](https://wiki.dendron.so/notes/BWYKFQ8297OgfWWyV7Bgn/) 筆記的功能 (Tags 就是其中一種)，另外也有給團隊使用的組織方式。\r\n\r\n![](/assets/images/2022-01-01-13-41-23.png)\r\n\r\n> 有這麼多組織(Organizing)的方式...(水好深)。🤤\r\n\r\n另外 Dendron 還可以部署到 Github Pages 上，詳情請參閱官網: [Dendron to Github Pages](https://wiki.dendron.so/notes/yg3EL1x9fEe4NMqxUC3jP/)。\r\n\r\n下載 `Dendron CLI` 後可以將筆記轉成資料、並套上 `Next.js` 的部落格樣板，`git push` 到 github 上做些設定就可以看到部落格了。🎉\r\n\r\n所以 `Next.js` 的使用者有福了!可以用熟悉的網頁框架客製化自己的部落格。\r\n\r\n謝謝 Dendron 作者們讓菜雞如我可以接觸 `Next.js`。😆\r\n\r\n### 撰寫文章\r\n\r\n選擇在欲要新增文章的 parent .md 檔上，`Dendron: Lookup (Ctrl+L / Cmd+L) `，輸入檔名就可以開始寫新筆記了。\r\n\r\n### 建置並預覽筆記\r\n\r\n- **Preview**\r\n\r\n  `npx dendron publish dev`\r\n\r\n  http://localhost:3000 在本機查看網站，`Crtl+C` 離開終端機。\r\n\r\n- **Publish**\r\n\r\n  `npx dendron publish export --target github`\r\n\r\n  以 target github 輸出網站。\r\n\r\n參考資料:\r\nhttps://wiki.dendron.so/notes/yg3EL1x9fEe4NMqxUC3jP/\r\n\r\n---\r\n\r\n### .next 專案 fork 來源\r\n\r\nhttps://github.com/dendronhq/nextjs-template\r\n\r\n---\r\n\r\n## 問題紀錄\r\n\r\n### github page build 失敗\r\n\r\n```bash\r\n  /usr/bin/git submodule sync\r\n  Error: fatal: No url found for submodule path '.next' in .gitmodules\r\n```\r\n\r\n![](/assets/images/2021-12-31-19-23-24.png)\r\n\r\n解答: https://stackoverflow.com/questions/4185365/no-submodule-mapping-found-in-gitmodule-for-a-path-thats-not-a-submodule\r\n\r\n- 問題起因: `git submodule update --init` 發生 No submodule mapping found in .gitmodules 問題。\r\n\r\n  覺得應該是一開始我 `git init` 時，忘記先將 .next 排除版控 `echo .next >> .gitignore`。\r\n\r\n  造成 .git 版控出了一些問題 (.next 自己也有一個 .git 版控)，執行下面的指令後就好了。\r\n\r\n- `git rm --cached .next`\r\n\r\n  [git 官網參數說明](https://git-scm.com/docs/git-rm)\r\n\r\n  ```bash\r\n  --cached\r\n  Use this option to unstage and remove paths only from the index.\r\n  Working tree files, whether modified or not, will be left alone.\r\n  ```\r\n\r\n  取消追蹤 .next 資料夾版控後，github page build 就可以順利完成 github page 的 build 了。 😄\r\n\r\n### npx dendron publish dev ctrl+c 以後 port 沒有清掉\r\n\r\n`netstat -a` 查看使用中連線。\r\n\r\n`npx kill-port 3000` 清除 3000 port。\r\n\r\n參考網址: https://stackoverflow.com/questions/39632667/how-do-i-kill-the-process-currently-using-a-port-on-localhost-in-windows\r\n\r\n### 加入 Disqus 留言板\r\n\r\n參考資料:\r\n\r\n- [Integrating Disqus in your Next.js React Application by Imran Sayed](https://imranhsayed.medium.com/disqus-is-a-networked-community-platform-used-by-hundreds-of-thousands-of-sites-all-over-the-web-39b88bafaca5)\r\n- [如何安裝 Disqus 留言板](https://ithelp.ithome.com.tw/articles/10242269)\r\n\r\n### 為標題編號\r\n\r\n下載 vscode 套件 [markdown all in one](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one)\r\n\r\n`shift + ctrl + P` 輸入 number 然後選這個，就會自動編號了。\r\n\r\n![](/assets/images/2022-02-08-18-31-50.png)\r\n","n":0.064}}},{"i":21,"$":{"0":{"v":"pending notes","n":0.707}}},{"i":22,"$":{"0":{"v":"2022","n":1}}},{"i":23,"$":{"0":{"v":"0322-RWD排版固定或流動","n":1},"1":{"v":"\n因為設計稿給了三種尺寸 pc/pad/phone，\n\n然後程式裡有三個用 min-width 分開的中斷點 1170px/768px/320px\n\n(所以中斷點吃不到的地方就吃預設值)\n\n``` javascript\n┌──────────────────┐\n│ 320  768   1170  │\n│  │→   │→     │→  │\n└──────────────────┘\n```\n\n一開始想說應該是到中斷點就換版型的排版，結果好像是 pad(768px) 以下要變流動(Liquid)的排版。\n\n機會難得想把這篇文章的東西英翻中，記錄一下xD (文章作者是:Steven Bradley)\n\nhttps://vanseodesign.com/web-design/fixed-or-liquid-design/\n","n":0.236}}},{"i":24,"$":{"0":{"v":"0109-TypeScript(未完)","n":1},"1":{"v":"\n## 編譯器\n","n":0.707}}},{"i":25,"$":{"0":{"v":"0101 Server建置與管理","n":0.707},"1":{"v":"\n## 前言\n\n打算伺服器入門一下。\n\n策略: 入門先求廣，這篇筆記會記錄我讀這本書的每章節主旨，看完之後找到有興趣或不懂的地方再開坑深挖。\n\n## 書名: [MIS 一定要懂的伺服器建置與管理知識](https://www.books.com.tw/products/0010807048)\n\n作者: きはし まさひろ | 譯者： 陳禹豪, 黃瑋婷 | 出版社：旗標\n\n共八章節。\n\n## Ch01 【序章】\n\n- 定義 Server: 對企業內部或網際網路上的用戶端(Client)提供各種服務的電腦。\n- 用戶端和伺服器之間的關係: 由伺服器和用戶端架構而成的系統就稱為「用戶端/伺服器系統(Client/Server System)，或稱為主從式架構」，是網路世界最常見的服務架構。\n- Server 會提供不同服務，所謂的伺服器其實就是一部安裝了「伺服器軟體」的電腦，不同的伺服器軟體提供不同的服務。\n- 因應各種需求而生伺服器功能:\n\n## Ch02 【伺服器管理者必備的網路基礎知識】\n\nOSI 參考模型及通訊協定 / 交換 (Switching) 技術 / IP 和 IP 位址 / 路由 (Routing) / ARP 協定 / TCP 和 UDP 協定 / NAT 和 NAPT\n\n## Ch03 【從七大面向建立架設前置知識】\n\nOn-premise / 雲端 / 混合雲 / IaaS / PaaS / SaaS / 資料中心 / 虛擬化 / 即時移轉 / 容錯系統 / Host OS 型態 / Hypervisor 型態 / 直立式 (Tower) / 機架式 (Rack) / 刀鋒式 (Blade)\n\n## Ch04 【企業內部的伺服器】\n\nDHCP 伺服器 / 位址池 / DNS 伺服器 / 工作群組 / AD 網域 / 網域主控站 / 檔案伺服器 / NAS / 列印伺服器 / SSO 伺服器 / SSO 代理型 / SSO 反向代理型 / MFA 多重驗證 / SIP 伺服器 / Proxy 伺服器 / SMTP 伺服器 / POP3 伺服器 / SMTP AUTH / POP before SMTP / MS Exchange Server / Exchange Online / 私有雲\n\n## Ch05 【對外營運的伺服器】\n\n網頁伺服器 / Apache / IIS / SSL 伺服器 / 數位憑證 / 對稱金鑰加密 / 公開金鑰加密 / FTP 伺服器 / 網頁應用程式伺服器 / Java EE / .NET Framework / 資料庫伺服器 / RDBMS / VPN 伺服器 / IPSec VPN / SSL-VPN\n\n## Ch06 【預防伺服器發生故障】\n\nRAID1 / RAID5 / RAID0+1 / Teaming / 容錯 / 叢集 / 儲存共享架構 / 資料鏡像架構 / 伺服器負載平衡技術 / 廣域負載平衡技術 / UPS\n\n## Ch07 【伺服器的資安防護】\n\n傳統式防火牆 / UTM 整合式威脅管理設備 / NGFW 次世代防火牆 / WAF 網頁應用程式防火牆 / SQL 注入攻擊 / 跨網站指令碼 (XSS) / 跨網站偽造請求 (CSRF) / Security Zone / Untrust Zone / DMZ / Trust Zone / IDS 與 IPS\n\n## Ch08 【伺服器的維運管理】\n\n遠端管控 / SSH / 系統更新及 Bug 修復 / WSUS 伺服器 / 備份與還原 / ipconfig 等常用指令 / NTP 伺服器 / Syslog 伺服器 / SNMP 伺服器\n\n## 小結\n","n":0.061}}}]}
