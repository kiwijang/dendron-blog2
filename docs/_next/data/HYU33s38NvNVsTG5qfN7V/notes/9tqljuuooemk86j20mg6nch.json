{"pageProps":{"note":{"id":"9tqljuuooemk86j20mg6nch","title":"1213 [Angular] ngZone 和 Change Detection","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[{"type":"frontmatterTag","from":{"fname":"0drops.2022.0920-[Angular] ngZone 和 Change Detection","id":"9tqljuuooemk86j20mg6nch","vaultName":"vault"},"value":"tags.PROG.Angular","alias":"PROG.Angular","xvault":false,"to":{"fname":"tags.PROG.Angular"}}],"anchors":{"先備知識":{"type":"header","text":"先備知識","value":"先備知識","line":11,"column":0,"depth":2},"原型鏈":{"type":"header","text":"原型鏈","value":"原型鏈","line":15,"column":0,"depth":3},"語法糖":{"type":"header","text":"語法糖","value":"語法糖","line":40,"column":0,"depth":3},"angular-compiler":{"type":"header","text":"Angular compiler","value":"angular-compiler","line":88,"column":0,"depth":3},"angular-decorator-裝飾器":{"type":"header","text":"Angular Decorator 裝飾器","value":"angular-decorator-裝飾器","line":102,"column":0,"depth":3},"angular-是怎麼更新畫面的":{"type":"header","text":"Angular 是怎麼更新畫面的?","value":"angular-是怎麼更新畫面的","line":270,"column":0,"depth":2},"ngzone-和-change-detection":{"type":"header","text":"ngZone 和 Change Detection","value":"ngzone-和-change-detection","line":278,"column":0,"depth":2}},"fname":"0drops.2022.0920-[Angular] ngZone 和 Change Detection","updated":1672149805071,"created":1663605777459,"parent":"0YMTMineOCu8QrkzCD9rn","children":[],"data":{},"contentHash":"18aa02beef783750fb5fa7d6996f42a5","custom":{"status":"w"},"tags":["PROG.Angular"]},"body":"<h1 id=\"1213-angular-ngzone-和-change-detection\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#1213-angular-ngzone-和-change-detection\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>1213 [Angular] ngZone 和 Change Detection</h1>\n<h2 id=\"先備知識\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#先備知識\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>先備知識</h2>\n<p>ES6 的 class 是一種為了讓 JavaScript 的類別更容易使用的語法糖。這種語法糖提供了一個更直覺和更易於使用的方法來定義物件，允許您使用更簡潔和模塊化的代碼來實現物件導向程式設計。這種語法糖在 ES6 中引入，提供了一種新的方法來定義類別，並允許您定義類別成員，包括屬性和方法。</p>\n<h3 id=\"原型鏈\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#原型鏈\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>原型鏈</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Person</span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span>\n  lastName</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">firstName</span> <span class=\"token operator\">=</span>\n    firstName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastName</span> <span class=\"token operator\">=</span>\n    lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">fullName</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span>\n        <span class=\"token punctuation\">.</span><span class=\"token property-access\">firstName</span> <span class=\"token operator\">+</span>\n      <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span>\n      <span class=\"token keyword\">this</span>\n        <span class=\"token punctuation\">.</span><span class=\"token property-access\">lastName</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"語法糖\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#語法糖\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>語法糖</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span>\n    lastName</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">firstName</span> <span class=\"token operator\">=</span>\n      firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastName</span> <span class=\"token operator\">=</span>\n      lastName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span>\n        <span class=\"token punctuation\">.</span><span class=\"token property-access\">firstName</span> <span class=\"token operator\">+</span>\n      <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span>\n      <span class=\"token keyword\">this</span>\n        <span class=\"token punctuation\">.</span><span class=\"token property-access\">lastName</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Doe\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n</code></pre>\n<p>使用方法都一樣:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Doe\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints \"John Doe\"</span>\n</code></pre>\n<h3 id=\"angular-compiler\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#angular-compiler\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Angular compiler</h3>\n<p>Angular 的 compiler 是基於 TypeScript 語言實作的，並且使用了一些類似於 AST（抽象語法樹）的技術來分析和處理應用程式的源代碼。在轉換過程中，compiler 會進行語法分析、符號檢查和代碼生成等步驟，最終產生能夠在瀏覽器中執行的 JavaScript 代碼。</p>\n<p>TypeScript 是一種由 Microsoft 開發的程式語言，它是 JavaScript 的超集，提供了類型系統和面向對象编程的特性。Angular 的 compiler 可以將 TypeScript 編譯成 JavaScript，讓瀏覽器可以理解和執行。</p>\n<p>當 Angular 程式碼被加載到瀏覽器時，Angular 的 compiler 會在背景執行，負責解析模板並生成對應的 JavaScript 代碼。這些代碼會被執行，用來更新網頁內容，以反應使用者的互動。</p>\n<p>Angular 的 compiler 是一個非常強大的工具，它可以提供許多有用的功能，如靜態型別檢查、自動化優化、代碼生成等。它的出現大大提高了 Angular 的開發效率和可維護性。</p>\n<p><img src=\"/assets/images/2022-12-13-16-21-46.png\"></p>\n<blockquote>\n<p>在 Angular 中我們可以用裝飾器給 calss 一些 metadata。就是要寫給 compiler 看的。</p>\n</blockquote>\n<h3 id=\"angular-decorator-裝飾器\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#angular-decorator-裝飾器\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Angular Decorator 裝飾器</h3>\n<p>Angular 裝飾器是一種特殊的語法，可以用來修改程式碼中的類別定義。裝飾器可以添加、修改或刪除類別的某些屬性或方法，並且可以控制類別如何被編譯。</p>\n<p>Angular 裝飾器的用途非常廣泛，它可以用來實現許多不同的功能。例如，裝飾器可以用來標記一個類別是一個 Angular 組件，或者標記一個屬性是一個輸入變量，或者標記一個方法是一個事件處理器等。</p>\n<p>裝飾器非常方便，可以讓開發人員更快速地定義和使用類別，並且可以讓類別更加結構化和模組化。它是 Angular 的一個重要特性，在 Angular 程式碼中經常被用到。</p>\n<p>以下就是 Component 裝飾器的 interface:</p>\n<p><a href=\"https://github1s.com/angular/angular/blob/HEAD/packages/core/src/metadata/directives.ts\">https://github1s.com/angular/angular/blob/HEAD/packages/core/src/metadata/directives.ts</a></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token doc-comment comment\">/**\n * Supplies configuration metadata for an Angular component.\n *\n * <span class=\"token keyword\">@publicApi</span>\n */</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Component</span></span>\n  <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Directive</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token doc-comment comment\">/**\n   * The change-detection strategy to use for this component.\n   *\n   * When a component is instantiated, Angular creates a change detector,\n   * which is responsible for propagating the component's bindings.\n   * The strategy is one of:\n   * - `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).\n   * - `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`.\n   */</span>\n  changeDetection<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ChangeDetectionStrategy</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * Defines the set of injectable objects that are visible to its view DOM children.\n   * See [example](#injecting-a-class-with-a-view-provider).\n   *\n   */</span>\n  viewProviders<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Provider</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * The module ID of the module that contains the component.\n   * The component must be able to resolve relative URLs for templates and styles.\n   * SystemJS exposes the `__moduleName` variable within each module.\n   * In CommonJS, this can  be set to `module.id`.\n   *\n   */</span>\n  moduleId<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * The relative path or absolute URL of a template file for an Angular component.\n   * If provided, do not supply an inline template using `template`.\n   *\n   */</span>\n  templateUrl<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * An inline template for an Angular component. If provided,\n   * do not supply a template file using `templateUrl`.\n   *\n   */</span>\n  template<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * One or more relative paths or absolute URLs for files containing CSS stylesheets to use\n   * in this component.\n   */</span>\n  styleUrls<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * One or more inline CSS stylesheets to use\n   * in this component.\n   */</span>\n  styles<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * One or more animation `trigger()` calls, containing\n   * [`state()`](api/animations/state) and `transition()` definitions.\n   * See the [Animations guide](/guide/animations) and animations API documentation.\n   *\n   */</span>\n  animations<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * An encapsulation policy for the component's styling.\n   * Possible values:\n   * - `ViewEncapsulation.Emulated`: Apply modified component styles in order to emulate\n   *                                 a native Shadow DOM CSS encapsulation behavior.\n   * - `ViewEncapsulation.None`: Apply component styles globally without any sort of encapsulation.\n   * - `ViewEncapsulation.ShadowDom`: Use the browser's native Shadow DOM API to encapsulate styles.\n   *\n   * If not supplied, the value is taken from the `CompilerOptions`\n   * which defaults to `ViewEncapsulation.Emulated`.\n   *\n   * If the policy is `ViewEncapsulation.Emulated` and the component has no\n   * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> Component#styles styles<span class=\"token punctuation\">}</span> nor <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> Component#styleUrls styleUrls<span class=\"token punctuation\">}</span>,\n   * the policy is automatically switched to `ViewEncapsulation.None`.\n   */</span>\n  encapsulation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ViewEncapsulation</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * Overrides the default interpolation start and end delimiters (`<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>` and `<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>`).\n   */</span>\n  interpolation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * A set of components that should be compiled along with\n   * this component. For each component listed here,\n   * Angular creates a <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> ComponentFactory<span class=\"token punctuation\">}</span> and stores it in the\n   * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> ComponentFactoryResolver<span class=\"token punctuation\">}</span>.\n   * <span class=\"token keyword\">@deprecated</span> Since 9.0.0. With Ivy, this property is no longer necessary.\n   */</span>\n  entryComponents<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&#x3C;</span>\n    <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">Type</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * True to preserve or false to remove potentially superfluous whitespace characters\n   * from the compiled template. Whitespace characters are those matching the `\\s`\n   * character class in JavaScript regular expressions. Default is false, unless\n   * overridden in compiler options.\n   */</span>\n  preserveWhitespaces<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * Angular components marked as `standalone` do not need to be declared in an NgModule. Such\n   * components directly manage their own template dependencies (components, directives, and pipes\n   * used in a template) via the imports property.\n   *\n   * More information about standalone components, directives, and pipes can be found in [this\n   * guide](guide/standalone-components).\n   */</span>\n  standalone<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * The imports property specifies the standalone component's template dependencies — those\n   * directives, components, and pipes that can be used within its template. Standalone components\n   * can import other standalone components, directives, and pipes as well as existing NgModules.\n   *\n   * This property is only available for standalone components - specifying it for components\n   * declared in an NgModule generates a compilation error.\n   *\n   * More information about standalone components, directives, and pipes can be found in [this\n   * guide](guide/standalone-components).\n   */</span>\n  imports<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">Type</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">ReadonlyArray</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * The set of schemas that declare elements to be allowed in a standalone component. Elements and\n   * properties that are neither Angular components nor directives must be declared in a schema.\n   *\n   * This property is only available for standalone components - specifying it for components\n   * declared in an NgModule generates a compilation error.\n   *\n   * More information about standalone components, directives, and pipes can be found in [this\n   * guide](guide/standalone-components).\n   */</span>\n  schemas<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">SchemaMetadata</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Angular 支援自訂裝飾器，這又是另一個需要探討的主題了。</p>\n<h2 id=\"angular-是怎麼更新畫面的\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#angular-是怎麼更新畫面的\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Angular 是怎麼更新畫面的?</h2>\n<p>在 Angular 中，更新畫面主要是通過應用程式的觀察者模式 (observer pattern) 來實現的。具體來說，Angular 會監聽應用程式中的模型變量，當它們發生改變時，Angular 就會更新相應的畫面元素。</p>\n<p>在 Angular 中，應用程式的模型變量是存儲在特定的類中的。這些類通常會繼承自 Angular 框架中的一個基礎類，比如 Angular 中的 Component 等類。當這些類中的模型變量發生改變時，Angular 就會根據定義的模板更新畫面。</p>\n<p>總的來說，Angular 主要是通過監聽模型變量的變化來更新畫面的，而這些模型變量通常是存儲在特定的類中的。</p>\n<h2 id=\"ngzone-和-change-detection\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#ngzone-和-change-detection\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>ngZone 和 Change Detection</h2>\n<p>Change Detection 和 ngZone 是 Angular 中的兩個功能，用於處理應用程式中的變化和狀態更新。</p>\n<p>Change Detection 是 Angular 的一個核心功能，用於監測應用程式中的變化，並在必要時更新應用程式的使用者界面。它會檢查組件的輸入變數，並在變數更改時進行更新。</p>\n<p>ngZone 是 Angular 中的一個服務，用於將代碼放入「觸發網路更新的區域」（zone）中。這有助於檢測代碼執行的更改，並在必要時觸發 Angular 的 Change Detection 過程。這可以幫助應用程式保持最新，並確保使用者界面與應用程式的狀態保持同步。</p>\n<p>總的來看，Change Detection 是 Angular 用於監測應用程式中的變化，並在必要時更新使用者界面的功能。而 ngZone 則是一個服務，用於將代碼放入「觸發網路更新的區域」中，以幫助檢測代碼執行的更改，並在必要時觸發 Angular 的 Change Detection 過程。</p>\n<p>通常情況下，當你的應用程式中有異步代碼，例如定時器、非同步網路請求或事件監聽器時，你可能會用到「觸發網路更新的區域」。這是因為這些異步代碼可能會在 Angular 的 Change Detection 過程之外執行，並且可能會更改應用程式的狀態。通過使用 ngZone 服務，你可以確保這些異步代碼能夠觸發 Angular 的 Change Detection 過程，使應用程式的狀態保持最新。</p>\n<p>Change Detection 是 Angular 中的一個核心功能，用於監測應用程式中的變化，並在必要時更新應用程式的使用者界面。</p>\n<p>Change Detection 過程有以下幾個步驟：</p>\n<ul>\n<li>\n<p>檢查組件的輸入變數：Angular 會檢查組件的輸入變數，看看有沒有改變。</p>\n</li>\n<li>\n<p>更新組件的輸出值：如果組件的輸入變數有改變，Angular 會更新組件的輸出值。</p>\n</li>\n<li>\n<p>檢查組件的模板：Angular 會檢查組件的模板，看看有沒有使用到輸出值。</p>\n</li>\n<li>\n<p>更新使用者界面：如果組件的模板使用了輸出值，Angular 會更新使用者界面。</p>\n</li>\n</ul>\n<p>在總的來看，Change Detection 過程是一個自動過程，用於監測應用程式中的變化，並在必要時更新使用者界面。</p>\n<hr>\n<h2 id=\"tags\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#tags\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Tags</h2>\n<ol>\n<li><a class=\"color-tag\" style=\"--tag-color: #017371;\" href=\"/notes/zavPiB0ApTq1sGZOGq9xJ\">PROG.Angular</a></li>\n</ol>","noteIndex":{"id":"root","title":"( Φ w Φ )","desc":"","updated":1650381339323,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"acc933de5170843ff0ca0380d9ab6de4","links":[],"anchors":{},"children":["Cybv0wy1d2NbWoMaJ9Xst","jJJHMSzIVnRXuspVex7z3","u4tSbmkJewrKonY3sL544","WAKWMq3SeVmlAmZRqCbpB","rEbR1FrKkZzyjo6ahAgm3"],"parent":null,"data":{},"body":"\n\r\nDendron 官網: https://wiki.dendron.so/\r\n\r\n<!-- ![[首次使用 Dendron 紀錄|drops.2021.1226-first-day#使用-dendron-紀錄:#*]] -->\r\n<!-- <div class=\"portal-container\">\r\n<div class=\"portal-head\">\r\n<div class=\"portal-backlink\">\r\n<div class=\"portal-title\">From <span class=\"portal-text-title\">1226 使用 Dendron 紀錄</span></div>\r\n<a href=\"/notes/DTeYpEuPv3KIHugUyqZPu\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\r\n</div>\r\n</div>\r\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\r\n<div class=\"portal-parent-fader-top\"></div>\r\n<div class=\"portal-parent-fader-bottom\"></div><h2 id=\"使用-dendron-紀錄\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#使用-dendron-紀錄\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>使用 Dendron 紀錄</h2>\r\n</div></div> -->\r\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"dendronVersion":"0.92.1"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://kiwijang.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"/ᐠ ._. ᐟ\\✧","description":"網頁開發技術筆記"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree","editRepository":"https://github.com/kiwijang/kiwijang.github.io.git"},"enablePrettyLinks":true},"site":{"siteHierarchies":["root"],"siteRootDir":"docs","siteUrl":"https://kiwijang.github.io","title":"/ᐠ ._. ᐟ\\✧","copyAssets":true,"usePrettyRefs":true,"description":"Personal knowledge space","siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true}},"__N_SSG":true}