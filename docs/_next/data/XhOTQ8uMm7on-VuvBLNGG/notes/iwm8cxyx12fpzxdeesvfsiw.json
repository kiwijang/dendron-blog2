{"pageProps":{"note":{"id":"iwm8cxyx12fpzxdeesvfsiw","title":"0914 [Ch2Ch3]IO、OS 架構、VM","desc":"","updated":1670674264619,"created":1663169293429,"tags":["PROG.OS"],"status":"w","custom":{"status":"w"},"fname":"0drops.2022.0914-[Ch2Ch3]IO、OS 架構、VM","type":"note","vault":{"fsPath":"vault"},"contentHash":"cb30f23a04f0f1b24471ea57eb4e0c2c","links":[{"type":"frontmatterTag","from":{"fname":"0drops.2022.0914-[Ch2Ch3]IO、OS 架構、VM","id":"iwm8cxyx12fpzxdeesvfsiw","vaultName":"vault"},"value":"tags.PROG.OS","alias":"PROG.OS","xvault":false,"to":{"fname":"tags.PROG.OS"}}],"anchors":{"io-運作方式-interrupt-介紹hw-resource-protection":{"type":"header","text":"IO 運作方式: Interrupt 介紹、HW Resource protection","value":"io-運作方式-interrupt-介紹hw-resource-protection","line":11,"column":0,"depth":2},"io-運作方式":{"type":"header","text":"I/O 運作方式","value":"io-運作方式","line":13,"column":0,"depth":3},"polling-io-programmed-io":{"type":"header","text":"polling I/O (programmed I/O)","value":"polling-io-programmed-io","line":15,"column":0,"depth":4},"interrupted-io":{"type":"header","text":"Interrupted I/O","value":"interrupted-io","line":53,"column":0,"depth":4},"dma":{"type":"header","text":"DMA","value":"dma","line":86,"column":0,"depth":4},"interrupt-之處理":{"type":"header","text":"Interrupt 之處理","value":"interrupt-之處理","line":88,"column":0,"depth":4},"種類":{"type":"header","text":"種類","value":"種類","line":118,"column":0,"depth":4},"interrupt-介紹":{"type":"header","text":"Interrupt 介紹","value":"interrupt-介紹","line":120,"column":0,"depth":3},"hw-resource-protection":{"type":"header","text":"HW Resource Protection","value":"hw-resource-protection","line":122,"column":0,"depth":4},"基礎":{"type":"header","text":"基礎","value":"基礎","line":124,"column":0,"depth":4},"daul-mode-運作":{"type":"header","text":"Daul mode 運作","value":"daul-mode-運作","line":126,"column":0,"depth":5},"privileged-instructions":{"type":"header","text":"privileged instructions","value":"privileged-instructions","line":128,"column":0,"depth":5},"io":{"type":"header","text":"I/O","value":"io","line":130,"column":0,"depth":4},"memory":{"type":"header","text":"memory","value":"memory","line":132,"column":0,"depth":4},"cpu":{"type":"header","text":"cpu","value":"cpu","line":134,"column":0,"depth":4}},"children":[],"parent":"0YMTMineOCu8QrkzCD9rn","data":{}},"body":"<h1 id=\"0914-ch2ch3ioos-架構vm\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#0914-ch2ch3ioos-架構vm\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>0914 [Ch2Ch3]IO、OS 架構、VM</h1>\n<h2 id=\"io-運作方式-interrupt-介紹hw-resource-protection\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#io-運作方式-interrupt-介紹hw-resource-protection\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>IO 運作方式: Interrupt 介紹、HW Resource protection</h2>\n<h3 id=\"io-運作方式\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#io-運作方式\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>I/O 運作方式</h3>\n<h4 id=\"polling-io-programmed-io\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#polling-io-programmed-io\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>polling I/O (programmed I/O)</h4>\n<p>Def: 又叫 Busy waiting I/O 或 programmed I/O</p>\n<p>步驟如下:</p>\n<ol>\n<li>執行中的 Process，發出 I/O request 給 OS 希望 OS 提供某種 I/O 服務，eg Disk read a file。</li>\n<li>OS 收到請求後(可能)會先暫停(block)該 process 即此 process 會放 CPU 至於 waiting queue 等待 I/O completed。</li>\n<li>OS (or Kernel) 中的 I/O-subsystem 會處理此請求。eg 也會檢查 Disk cache 是否有命中，若有剛從 Disk cache 取出 file 資料 不用 read I/O。</li>\n<li>I/O-subsystem 會 pass 此請求給 device driver(驅動程式)。\ndriver -( request I/O subsystem )-> OS</li>\n<li>device driver 會依此請求設定相關 I/O commands 到 device controller(硬體)。</li>\n<li>device controller  會指揮 I/O-device 執行 I/O 運作</li>\n<li>此時 CPU 可能 idle，OS 可能會將 CPU 分派給其他 process 使用。\n[怎麼知道設備到底完成了沒有?]</li>\n<li>CPU 會不斷地去 polling I/O-device controller 上之相關 registers 值，確定 I/O 運作完成與否或有無 error。</li>\n</ol>\n<p>缺點: 本希望 CPU 專心 process，但 CPU 並未將全 time 用於此 process exec 上而是耗費大量時間去 polling IO-device controllers。\n所以 CPU utilization 不高，且 process throughput 偏低。</p>\n<div class=\"mermaid\">\n  flowchart TD\n    B[device driver 驅動程式] -->|設定相關 I/O-commands| C\n    C[device controller 硬體] -->|指揮 I/O-device 執行 I/O 運作| D[I/O-device]\n    B ---->|interface| E[OS subsystem - I/O subsystem]\n    E ---->|register| B\n</div>\n<div class=\"mermaid\">\n  flowchart TD\n    A[CPU] -->|cpu idle 分派給其他程序使用| E[7 Process B 看電視]\n    A[CPU] --> B\n    B[Process A 看書 - 2 blocked] -->|1 發出 I/O 請求| C\n    C[3 kernal - I/O subsystem] -->|4 pass| D\n    D[device driver] -->|5 I/O 命令| F[6 I/O decvice 硬體 - 好了不會通知]\n    A ---->|8 polling - CPU 要一直檢查好了沒| F\n</div>\n<h4 id=\"interrupted-io\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#interrupted-io\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Interrupted I/O</h4>\n<ol start=\"8\">\n<li>當 I/O 運作完成，I/O-device controller 會發出一個 \"I/O-completed\" interrupt 通知 CPU(OS)</li>\n<li>OS 收到中斷通知後(可能)會先暫停目前執行中的 process(eg. PB execution -> ready state)</li>\n<li>OS 會依 Interrupt ID(No) 查詢 Interrupt vector(表) 找出中斷對應的服務處理程式(ISR: interrupt service routine) 之位址。</li>\n<li>Jump to ISR 位址，ISR 執行(eg. 將 File Data 從 Controller 之 buffer registers 搬到 memory 中)</li>\n<li>ISR 完成，控制權交回 kernel I/O-subsystem 通知 process 其 I/O completed 以及告知結果。</li>\n<li>OS 恢復中斷之前 process 的執行(eg Process B exec) 或交由 cpu schedule 決定下一執行之 process。</li>\n</ol>\n<div class=\"mermaid\">\n  flowchart TD\n    A[CPU] -->|cpu idle 分派給其他程序使用| E[7 Process B 看電視 - executed]\n    A[CPU] --> B\n    B[Process A 看書 - 2 blocked] -->|1 發出 I/O 請求| C\n    C[3 kernal - I/O subsystem - ISR] -->|4 pass| D\n    D[device driver] -->|5 I/O 命令| F[6 I/O decvice 硬體]\n    F ---->|8 發出 I/O-completed intterupt 到 OS 以通知 CPU I/O 已完成| C\n    E ---->|9 I/O 完成| G[Process B - ready]\n    C -->|10 根據 Interrupt ID 查中斷向量表 11 找到對應 ISR 並執行| C\n    F -->|11 ISR 執行需 CPU 參與 譬如將 I/O-device buffer 搬到 memory 之中| F\n    B -->|12 OS 通知 I/O-completed| H[Process A - ready]\n</div>\n<p>優點: </p>\n<p>CPU 無需花費時間用於 polling I/O device controller，而是可以全心用於 Process 之 execution 上。所以 CPU utilization 較高， throughput 相對地較高故 improve the system performance。</p>\n<p>缺點: </p>\n<ul>\n<li>Interrupt 之處理仍需耗費 cpu time (eg 查表.執行 ISR 保存中斷前 process 之 state etc)</li>\n<li></li>\n</ul>\n<h4 id=\"dma\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#dma\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>DMA</h4>\n<h4 id=\"interrupt-之處理\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#interrupt-之處理\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Interrupt 之處理</h4>\n<p>Def: DMA controller 負責 I/O-Device 與 memory 之間的 Data transfer 工作。此 transfer 過程不須 cpu 參與。</p>\n<p>所以 CPU 有更多時間用於 process exec 上。\n另外 DMA 適合用在 block-transfer oriented I/O Device。例如 Disk。\nnote: 可以降低 I/O completed 中斷頻率。不適合 Byte transfer oriented、character transfer oriente。</p>\n<p>缺點: 引入 DMA controller 必須與 CPU 競爭 memory 及 bus 使用權。(需有一硬體協調設計機制，此技術叫 interleaving 或 cycle stealing)</p>\n<p>有時 cpu 會被迫等待 DMA when it make use of memory bus.</p>\n<p>machine instruction cycle </p>\n<pre class=\"language-baah\"><code class=\"language-baah\">  抓指令    解碼     執行     x轉存器，記憶體抓   write back\n|   IF   |   DE   |   EXE   |        MEM        |     WB    | :storage\n   必須     不用      不用          可能            可能      :是否要去 memory access\n  有衝突     無       無           無/有           無/有     :DMA目前在使用 memory/也要用\n</code></pre>\n<p>ir 指令暫存器\nalu ← signal 通知</p>\n<p>當 conflict 時，通常給 DMA 高優先權。</p>\n<p>理由: DMA 對 memory、bus 上使用頻率低於 cpu 很多，優先配給 DMA (給需求量少的人)會有比較小的平均 waiting time 及較高之產出(throughput)。</p>\n<h4 id=\"種類\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#種類\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>種類</h4>\n<h3 id=\"interrupt-介紹\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#interrupt-介紹\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Interrupt 介紹</h3>\n<h4 id=\"hw-resource-protection\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#hw-resource-protection\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>HW Resource Protection</h4>\n<h4 id=\"基礎\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#基礎\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>基礎</h4>\n<h5 id=\"daul-mode-運作\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#daul-mode-運作\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Daul mode 運作</h5>\n<h5 id=\"privileged-instructions\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#privileged-instructions\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>privileged instructions</h5>\n<h4 id=\"io\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#io\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>I/O</h4>\n<h4 id=\"memory\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#memory\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>memory</h4>\n<h4 id=\"cpu\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#cpu\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>cpu</h4>\n<hr>\n<h2 id=\"tags\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#tags\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Tags</h2>\n<ol>\n<li><a class=\"color-tag\" style=\"--tag-color: #de7e5d;\" href=\"/notes/hikt5akgz6251z6wjkkmc99\">PROG.OS</a></li>\n</ol>","noteIndex":{"id":"root","title":"( Φ w Φ )","desc":"","updated":1650381339323,"created":1595961348801,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"acc933de5170843ff0ca0380d9ab6de4","links":[],"anchors":{},"children":["Cybv0wy1d2NbWoMaJ9Xst","u4tSbmkJewrKonY3sL544","WAKWMq3SeVmlAmZRqCbpB","rEbR1FrKkZzyjo6ahAgm3"],"parent":null,"data":{},"body":"\n\r\nDendron 官網: https://wiki.dendron.so/\r\n\r\n<!-- ![[首次使用 Dendron 紀錄|drops.2021.1226-first-day#使用-dendron-紀錄:#*]] -->\r\n<!-- <div class=\"portal-container\">\r\n<div class=\"portal-head\">\r\n<div class=\"portal-backlink\">\r\n<div class=\"portal-title\">From <span class=\"portal-text-title\">1226 使用 Dendron 紀錄</span></div>\r\n<a href=\"/notes/DTeYpEuPv3KIHugUyqZPu\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\r\n</div>\r\n</div>\r\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\r\n<div class=\"portal-parent-fader-top\"></div>\r\n<div class=\"portal-parent-fader-bottom\"></div><h2 id=\"使用-dendron-紀錄\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#使用-dendron-紀錄\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>使用 Dendron 紀錄</h2>\r\n</div></div> -->\r\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"dendronVersion":"0.92.1"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://kiwijang.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"/ᐠ ._. ᐟ\\✧","description":"網頁開發技術筆記"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree","editRepository":"https://github.com/kiwijang/kiwijang.github.io.git"},"enablePrettyLinks":true},"site":{"siteHierarchies":["root"],"siteRootDir":"docs","siteUrl":"https://kiwijang.github.io","title":"/ᐠ ._. ᐟ\\✧","copyAssets":true,"usePrettyRefs":true,"description":"Personal knowledge space","siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true}},"__N_SSG":true}